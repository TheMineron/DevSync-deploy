networks:
  devsync-network:
    driver: bridge

services:
  postgres:
    image: postgres:16.8
    container_name: devsync-postgres
    env_file:
      - .env
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./backend/init/setup.sql:/docker-entrypoint-initdb.d/setup.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 2s
      retries: 3
    networks:
      - devsync-network
    restart: unless-stopped

  pgbouncer:
    image: bitnami/pgbouncer:latest
    container_name: devsync-pgbouncer
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - './backend/pgbouncer/:/bitnami/pgbouncer/conf/'
    networks:
      - devsync-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: devsync-redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - devsync-network
    restart: unless-stopped
    command: redis-server --save 180 1 --loglevel warning

  backend:
    build:
      dockerfile: ./Dockerfile
      context: ./backend/devsync/
    container_name: devsync-backend
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - static_volume:/backend/static
      - media_volume:/backend/media
    networks:
      - devsync-network
    restart: unless-stopped
    command: >
      bash -c "python manage.py collectstatic --noinput && 
      python manage.py migrate && 
      gunicorn -b 0.0.0.0:8000 config.asgi:application -k uvicorn.workers.UvicornWorker"

  celery-worker:
    build:
      dockerfile: ./Dockerfile
      context: ./backend/devsync/
    container_name: devsync-celery-worker
    env_file:
      - .env
    depends_on:
      - redis
      - backend
    volumes:
      - static_volume:/backend/static
      - media_volume:/backend/media
    networks:
      - devsync-network
    restart: unless-stopped
    command: celery -A config worker -l info

  celery-beat:
    build:
      dockerfile: ./Dockerfile
      context: ./backend/devsync/
    container_name: devsync-celery-beat
    env_file:
      - .env
    depends_on:
      - redis
      - backend
    networks:
      - devsync-network
    volumes:
      - static_volume:/backend/static
      - media_volume:/backend/media
    restart: unless-stopped
    command: celery -A config beat -l info

  nginx:
    build:
      dockerfile: nginx/Dockerfile
      context: .
    container_name: devsync-nginx
    volumes:
      - static_volume:/backend/static
      - media_volume:/backend/media
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - devsync-network
    restart: unless-stopped

volumes:
  static_volume:
  media_volume:
  pg_data:
  redis_data: