import API_CONFIG from '../utils/Urls.ts';
import { authService } from './AuthService.tsx';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≥–ª–∞—Å–Ω–æ API)
export interface User {
    id: number;
    email: string;
    first_name: string;
    last_name: string;
    city: string;
    avatar: string | null;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserProject {
    id: number;
    title: string;
    date_created: string;
    owner: {
        id: number;
        email: string;
        first_name: string;
        last_name: string;
        avatar: string | null;
    };
    description: string;
    is_public: boolean;
    avatar: string | null;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–æ–µ–∫—Ç–æ–≤
export interface UserProjectsResponse {
    projects: UserProject[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UpdateUserData {
    first_name?: string;
    last_name?: string;
    city?: string;
    avatar?: File | null;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—à–∏–±–æ–∫ API
export interface ApiError {
    status?: number;
    data?: any;
    message: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
export const userService = {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    getCurrentUser: async (): Promise<User> => {
        try {
            const response = await fetch(API_CONFIG.FULL_URL.USERS.ME_URL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...authService.getAuthHeaders()
                }
            });

            if (!response.ok) {
                throw {
                    status: response.status,
                    message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                };
            }

            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateCurrentUser: async (userData: UpdateUserData): Promise<User> => {
        try {
            let body: string | FormData;
            let headers: HeadersInit;

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º FormData
            if (userData.avatar instanceof File) {
                const formData = new FormData();

                if (userData.first_name) formData.append('first_name', userData.first_name);
                if (userData.last_name) formData.append('last_name', userData.last_name);
                if (userData.city) formData.append('city', userData.city);
                formData.append('avatar', userData.avatar);

                body = formData;
                headers = {
                    // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å boundary
                    ...authService.getAuthHeaders()
                };
            } else {
                // –û–±—ã—á–Ω—ã–π JSON –∑–∞–ø—Ä–æ—Å
                const dataToSend: any = {};
                if (userData.first_name !== undefined) dataToSend.first_name = userData.first_name;
                if (userData.last_name !== undefined) dataToSend.last_name = userData.last_name;
                if (userData.city !== undefined) dataToSend.city = userData.city;
                if (userData.avatar === null) dataToSend.avatar = null;

                body = JSON.stringify(dataToSend);
                headers = {
                    'Content-Type': 'application/json',
                    ...authService.getAuthHeaders()
                };
            }

            const response = await fetch(API_CONFIG.FULL_URL.USERS.ME_URL, {
                method: 'PATCH',
                headers,
                body
            });

            if (!response.ok) {
                let errorData;
                const contentType = response.headers.get('content-type');

                if (contentType && contentType.includes('application/json')) {
                    errorData = await response.json();
                } else {
                    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                    const textError = await response.text();
                    console.error('Server returned non-JSON response:', textError);
                    errorData = { message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' };
                }

                throw {
                    status: response.status,
                    data: errorData,
                    message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                };
            }

            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserProjects: async (): Promise<UserProject[]> => {
        try {
            const response = await fetch(API_CONFIG.FULL_URL.PROJECTS.BASE_URL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...authService.getAuthHeaders()
                }
            });

            if (!response.ok) {
                throw {
                    status: response.status,
                    message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                };
            }

            const data: UserProjectsResponse = await response.json();
            return data.projects || [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deleteCurrentUser: async (): Promise<void> => {
        try {
            const response = await fetch(API_CONFIG.FULL_URL.USERS.ME_URL, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    ...authService.getAuthHeaders()
                }
            });

            if (!response.ok) {
                throw {
                    status: response.status,
                    message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'
                };
            }

            // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            authService.logout();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
            throw error;
        }
    },

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    searchUsers: async (searchQuery: string, page: number = 1, perPage: number = 10): Promise<{
        users: User[],
        count: number,
        total_pages: number,
        next: string | null,
        previous: string | null
    }> => {
        try {
            const url = new URL(API_CONFIG.FULL_URL.USERS.BASE_URL);

            if (searchQuery) {
                url.searchParams.append('search', searchQuery);
            }
            url.searchParams.append('page', page.toString());
            url.searchParams.append('per_page', perPage.toString());

            const response = await fetch(url.toString(), {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...authService.getAuthHeaders()
                }
            });

            if (!response.ok) {
                throw {
                    status: response.status,
                    message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
                };
            }

            const data = await response.json();
            return {
                users: data.users || [],
                count: data.count || 0,
                total_pages: data.total_pages || 0,
                next: data.links?.next || null,
                previous: data.links?.previous || null
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            throw error;
        }
    },

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UI
    convertProjectForUI: (project: UserProject) => ({
        id: project.id,
        title: project.title,
        isPrivate: !project.is_public,
        emoji: 'üìÅ', // TODO: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏??? :D
        description: project.description,
        owner: project.owner,
        date_created: project.date_created
    })
};