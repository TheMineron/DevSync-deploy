import React, { useEffect, useState, useCallback } from 'react';
import styles from '../styles/Notifications.module.css';
import { notificationsService, Notification as NotificationType, NotificationAction } from '../hooks/NotificationService';
import { useWebSocketNotifications } from '../hooks/UseWebSocketNotifications.tsx';

interface NotificationsPanelProps {
    visible: boolean;
    onClose?: () => void;
}

export const NotificationsPanel: React.FC<NotificationsPanelProps> = ({
                                                                          visible,
                                                                          onClose
                                                                      }) => {
    const [notifications, setNotifications] = useState<NotificationType[]>([]);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const handleNotificationReceived = useCallback((notification: NotificationType) => {
        setNotifications(prev => [notification, ...prev]);
    }, []);

    const handleNotificationUpdated = useCallback((updatedNotification: NotificationType) => {
        setNotifications(prev => prev.map(notification =>
            notification.id === updatedNotification.id ? updatedNotification : notification
        ));
    }, []);

    const handleNotificationDeleted = useCallback((notificationId: number) => {
        setNotifications(prev => prev.filter(notification => notification.id !== notificationId));
    }, []);

    const handleWebSocketError = useCallback((errorMessage: string) => {
        setError(`WebSocket –æ—à–∏–±–∫–∞: ${errorMessage}`);
    }, []);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
    const {
        isConnected,
        connectionError,
        markAsRead,
        markAllAsRead,
        markAsHidden,
        markAllAsHidden
    } = useWebSocketNotifications({
        onNotificationReceived: handleNotificationReceived,
        onNotificationUpdated: handleNotificationUpdated,
        onNotificationDeleted: handleNotificationDeleted,
        onError: handleWebSocketError
    });

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    useEffect(() => {
        if (visible) {
            fetchNotifications();
        }
    }, [visible]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    const fetchNotifications = async () => {
        try {
            setLoading(true);
            setError(null);
            const data = await notificationsService.getNotifications();
            setNotifications(data);
        } catch (err) {
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', err);
        } finally {
            setLoading(false);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    const handleAction = async (action: NotificationAction, notificationId: number) => {
        try {
            if (action.type === 'request') {
                await notificationsService.executeNotificationAction(action);
                // –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                markAsRead(notificationId);
            } else if (action.type === 'anchor') {
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL
                window.open(action.payload.url, '_blank');
                // –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                markAsRead(notificationId);
            }
        } catch (err) {
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ');
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è:', err);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const handleMarkAsRead = (notificationId: number) => {
        markAsRead(notificationId);
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setNotifications(prev =>
            prev.map(notification =>
                notification.id === notificationId
                    ? { ...notification, is_read: true }
                    : notification
            )
        );
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const handleMarkAllAsRead = () => {
        markAllAsRead();
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setNotifications(prev =>
            prev.map(notification => ({ ...notification, is_read: true }))
        );
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const handleHideNotification = (notificationId: number) => {
        markAsHidden(notificationId);
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setNotifications(prev =>
            prev.filter(notification => notification.id !== notificationId)
        );
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);

        if (diffHours < 1) {
            return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        } else if (diffHours < 24) {
            return `${diffHours}—á –Ω–∞–∑–∞–¥`;
        } else if (diffDays < 7) {
            return `${diffDays}–¥ –Ω–∞–∑–∞–¥`;
        } else {
            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        }
    };

    // CSS –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª—è –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    const getActionButtonClass = (style: string) => {
        switch (style) {
            case 'primary':
                return styles.actionButtonPrimary;
            case 'secondary':
                return styles.actionButtonSecondary;
            case 'danger':
                return styles.actionButtonDanger;
            default:
                return styles.actionButtonSecondary;
        }
    };

    if (!visible) return null;

    return (
        <div className={styles.notificationsContainer}>
            <div className={styles.notificationsHeader}>
                <h3>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                <div className={styles.notificationsControls}>
                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket */}
                    <div className={`${styles.connectionStatus} ${isConnected ? styles.connected : styles.disconnected}`}>
                        {isConnected ? 'üü¢' : 'üî¥'}
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ" */}
                    {notifications.some(n => !n.is_read) && (
                        <button
                            onClick={handleMarkAllAsRead}
                            className={styles.markAllReadButton}
                        >
                            –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ
                        </button>
                    )}

                    {onClose && (
                        <button onClick={onClose} className={styles.notificationsClose}>
                            ‚úï
                        </button>
                    )}
                </div>
            </div>

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
            {(error || connectionError) && (
                <div className={styles.errorMessage}>
                    {error || connectionError}
                </div>
            )}

            {loading ? (
                <div className={styles.notificationsEmpty}>
                    <div className={styles.loadingSpinner}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                </div>
            ) : notifications.length === 0 ? (
                <div className={styles.notificationsEmpty}>
                    <p>–£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
                </div>
            ) : (
                <div className={styles.notificationsList}>
                    {notifications.map((notification) => (
                        <div
                            key={notification.id}
                            className={`${styles.notificationItem} ${
                                notification.is_read ? styles.read : styles.unread
                            }`}
                        >
                            <div className={styles.notificationContent}>
                                <div className={styles.notificationHeader}>
                                    <h4 className={styles.notificationTitle}>
                                        {notification.title}
                                    </h4>
                                    <div className={styles.notificationMeta}>
                                        <span className={styles.notificationDate}>
                                            {formatDate(notification.created_at)}
                                        </span>
                                        <button
                                            onClick={() => handleHideNotification(notification.id)}
                                            className={styles.hideButton}
                                            title="–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                                        >
                                            ‚úï
                                        </button>
                                    </div>
                                </div>

                                <p className={styles.notificationMessage}>
                                    {notification.message}
                                </p>

                                {/* –î–µ–π—Å—Ç–≤–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                                {notification.actions_data && notification.actions_data.length > 0 && (
                                    <div className={styles.notificationActions}>
                                        {notification.actions_data.map((action, index) => (
                                            <button
                                                key={index}
                                                onClick={() => handleAction(action, notification.id)}
                                                className={getActionButtonClass(action.style)}
                                            >
                                                {action.text}
                                            </button>
                                        ))}
                                    </div>
                                )}

                                {/* –ü–æ–¥–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                                {notification.footnote && (
                                    <div className={styles.notificationFootnote}>
                                        {notification.footnote}
                                    </div>
                                )}

                                {/* –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—á–∏—Ç–∞—Ç—å" –¥–ª—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
                                {!notification.is_read && (
                                    <button
                                        onClick={() => handleMarkAsRead(notification.id)}
                                        className={styles.markAsReadButton}
                                    >
                                        –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                                    </button>
                                )}
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
};