import React, { useState, useEffect } from 'react';
import styles from '../../styles/ProjectManagement.module.css';
import { Input } from '../../components/common/Input/Input.tsx';
import { ErrorField } from '../../components/common/ErrorField/ErrorField.tsx';
import {
    suggestionsService,
    Suggestion,
    SuggestionCreateData
} from '../../hooks/VoitingService.tsx';

interface ProjectVotingProps {
    projectId: number;
}

const ProjectVoting: React.FC<ProjectVotingProps> = ({ projectId }) => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    const [suggestions, setSuggestions] = useState<Suggestion[]>([]);
    const [loading, setLoading] = useState(true);
    const [errors, setErrors] = useState<{[key: string]: string}>({});

    // –§–∏–ª—å—Ç—Ä—ã
    const [statusFilter, setStatusFilter] = useState<string>('all');
    const [searchQuery, setSearchQuery] = useState('');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const [showCreateSuggestion, setShowCreateSuggestion] = useState(false);
    const [newSuggestion, setNewSuggestion] = useState<SuggestionCreateData>({
        title: '',
        description: '',
        deadline: '',
        allow_multiple_votes: false
    });
    const [creating, setCreating] = useState(false);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        loadSuggestions();
    }, [projectId]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const loadSuggestions = async () => {
        try {
            setLoading(true);
            setErrors(prev => ({ ...prev, suggestions: '' }));

            const suggestionsData = await suggestionsService.getProjectSuggestions(projectId);
            setSuggestions(suggestionsData);
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', error);
            setErrors(prev => ({ ...prev, suggestions: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π' }));
        } finally {
            setLoading(false);
        }
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const handleCreateSuggestion = async () => {
        if (!newSuggestion.title.trim()) {
            setErrors(prev => ({ ...prev, suggestionTitle: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }));
            return;
        }

        if (!newSuggestion.description.trim()) {
            setErrors(prev => ({ ...prev, suggestionDescription: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }));
            return;
        }

        try {
            setCreating(true);
            setErrors(prev => ({
                ...prev,
                suggestionCreate: '',
                suggestionTitle: '',
                suggestionDescription: ''
            }));

            const createdSuggestion = await suggestionsService.createSuggestion(projectId, newSuggestion);
            setSuggestions(prev => [createdSuggestion, ...prev]);

            // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
            setNewSuggestion({
                title: '',
                description: '',
                deadline: '',
                allow_multiple_votes: false
            });
            setShowCreateSuggestion(false);

        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
            const errorMessage = error.data?.title?.[0] || error.data?.detail || error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è';
            setErrors(prev => ({ ...prev, suggestionCreate: errorMessage }));
        } finally {
            setCreating(false);
        }
    };

    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    const handleVote = async (suggestionId: number, voteType: 'for' | 'against') => {
        try {
            setErrors(prev => ({ ...prev, vote: '' }));

            await suggestionsService.voteForSuggestion(projectId, suggestionId, { vote_type: voteType });

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setSuggestions(prev => prev.map(suggestion => {
                if (suggestion.id === suggestionId) {
                    let updatedSuggestion = { ...suggestion };

                    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–ª–æ—Å
                    if (suggestion.user_vote === 'for') {
                        updatedSuggestion.votes_for--;
                    } else if (suggestion.user_vote === 'against') {
                        updatedSuggestion.votes_against--;
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
                    if (voteType === 'for') {
                        updatedSuggestion.votes_for++;
                    } else {
                        updatedSuggestion.votes_against++;
                    }

                    updatedSuggestion.user_vote = voteType;
                    return updatedSuggestion;
                }
                return suggestion;
            }));
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
            const errorMessage = error.data?.detail || error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏';
            setErrors(prev => ({ ...prev, vote: errorMessage }));
        }
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const handleDeleteSuggestion = async (suggestionId: number) => {
        const suggestion = suggestions.find(s => s.id === suggestionId);
        if (!suggestion) return;

        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "${suggestion.title}"?`)) {
            return;
        }

        try {
            setErrors(prev => ({ ...prev, deleteSuggestion: '' }));
            await suggestionsService.deleteSuggestion(projectId, suggestionId);
            setSuggestions(prev => prev.filter(s => s.id !== suggestionId));
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
            const errorMessage = error.data?.detail || error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è';
            setErrors(prev => ({ ...prev, deleteSuggestion: errorMessage }));
        }
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const filteredSuggestions = suggestions.filter(suggestion => {
        const matchesStatus = statusFilter === 'all' || suggestion.status === statusFilter;
        const matchesSearch = suggestion.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
            suggestion.description.toLowerCase().includes(searchQuery.toLowerCase());
        return matchesStatus && matchesSearch;
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const getStatusName = (status: Suggestion['status']): string => {
        switch (status) {
            case 'new': return '–ù–æ–≤–æ–µ';
            case 'under_review': return '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏';
            case 'approved': return '–ü—Ä–∏–Ω—è—Ç–æ';
            case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
            default: return status;
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    const getStatusColor = (status: Suggestion['status']): string => {
        switch (status) {
            case 'new': return '#FFDD2D';
            case 'under_review': return '#126DF7';
            case 'approved': return '#28A745';
            case 'rejected': return '#FF4444';
            default: return '#7C7C7C';
        }
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    if (loading) {
        return (
            <div className={styles.section}>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...</p>
            </div>
        );
    }

    return (
        <div>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
                <h2 className={styles.sectionTitle}>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</h2>
                <button
                    className={styles.primaryButton}
                    onClick={() => setShowCreateSuggestion(true)}
                >
                    –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                </button>
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã */}
            <div style={{
                display: 'flex',
                gap: '15px',
                marginBottom: '20px',
                padding: '20px',
                backgroundColor: '#F6F7F8',
                borderRadius: '14px',
                alignItems: 'center'
            }}>
                <Input
                    placeholder="üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    style={{ flex: 1 }}
                />

                <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
                    <span style={{ fontSize: '14px', color: '#7C7C7C', whiteSpace: 'nowrap' }}>–°—Ç–∞—Ç—É—Å:</span>
                    <div style={{ display: 'flex', gap: '8px' }}>
                        {[
                            { value: 'all', label: '–í—Å–µ' },
                            { value: 'new', label: '–ù–æ–≤—ã–µ' },
                            { value: 'under_review', label: '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' },
                            { value: 'approved', label: '–ü—Ä–∏–Ω—è—Ç—ã–µ' },
                            { value: 'rejected', label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ' }
                        ].map(filter => (
                            <button
                                key={filter.value}
                                onClick={() => setStatusFilter(filter.value)}
                                style={{
                                    padding: '5px 12px',
                                    backgroundColor: statusFilter === filter.value ? '#FFDD2D' : '#E0E0E0',
                                    border: 'none',
                                    borderRadius: '12px',
                                    fontSize: '12px',
                                    fontWeight: statusFilter === filter.value ? '500' : '400',
                                    color: statusFilter === filter.value ? '#353536' : '#7C7C7C',
                                    cursor: 'pointer',
                                    transition: 'all 0.2s ease'
                                }}
                            >
                                {filter.label}
                            </button>
                        ))}
                    </div>
                </div>
            </div>

            {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è */}
            {showCreateSuggestion && (
                <div style={{
                    backgroundColor: '#F6F7F8',
                    padding: '20px',
                    borderRadius: '14px',
                    marginBottom: '20px'
                }}>
                    <h3 style={{ marginBottom: '20px', fontSize: '20px', color: '#353536' }}>
                        –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    </h3>

                    <div className={styles.formGroup}>
                        <Input
                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*"
                            value={newSuggestion.title}
                            onChange={(e) => setNewSuggestion(prev => ({ ...prev, title: e.target.value }))}
                            hasError={!!errors.suggestionTitle}
                        />
                        {errors.suggestionTitle && <ErrorField message={errors.suggestionTitle} />}
                    </div>

                    <div className={styles.formGroup}>
                        <textarea
                            className={styles.textarea}
                            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*"
                            value={newSuggestion.description}
                            onChange={(e) => setNewSuggestion(prev => ({ ...prev, description: e.target.value }))}
                            style={{ height: '120px' }}
                        />
                        {errors.suggestionDescription && <ErrorField message={errors.suggestionDescription} />}
                    </div>

                    <div style={{ marginBottom: '20px' }}>
                        <label style={{ fontSize: '14px', color: '#7C7C7C', marginBottom: '5px', display: 'block' }}>
                            –î–µ–¥–ª–∞–π–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                        </label>
                        <Input
                            type="datetime-local"
                            value={newSuggestion.deadline}
                            onChange={(e) => setNewSuggestion(prev => ({ ...prev, deadline: e.target.value }))}
                        />
                    </div>

                    <div style={{ marginBottom: '20px' }}>
                        <h4 style={{ fontSize: '16px', color: '#353536', marginBottom: '15px' }}>
                            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        </h4>
                        <label style={{ display: 'flex', alignItems: 'center', gap: '10px', cursor: 'pointer' }}>
                            <input
                                type="checkbox"
                                checked={newSuggestion.allow_multiple_votes}
                                onChange={(e) => setNewSuggestion(prev => ({ ...prev, allow_multiple_votes: e.target.checked }))}
                                style={{ width: '16px', height: '16px' }}
                            />
                            <span style={{ fontFamily: 'Helvetica Neue', fontSize: '16px', color: '#353536' }}>
                                –†–∞–∑—Ä–µ—à–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
                            </span>
                        </label>
                    </div>

                    {errors.suggestionCreate && <ErrorField message={errors.suggestionCreate} />}

                    <div className={styles.actionButtons}>
                        <button
                            className={styles.secondaryButton}
                            onClick={() => {
                                setShowCreateSuggestion(false);
                                setNewSuggestion({
                                    title: '',
                                    description: '',
                                    deadline: '',
                                    allow_multiple_votes: false
                                });
                                setErrors(prev => ({
                                    ...prev,
                                    suggestionTitle: '',
                                    suggestionDescription: '',
                                    suggestionCreate: ''
                                }));
                            }}
                            disabled={creating}
                        >
                            –û—Ç–º–µ–Ω–∏—Ç—å
                        </button>
                        <button
                            className={styles.primaryButton}
                            onClick={handleCreateSuggestion}
                            disabled={creating}
                        >
                            {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
                        </button>
                    </div>
                </div>
            )}

            {/* –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π */}
            {filteredSuggestions.length > 0 ? (
                <div className={styles.itemsList}>
                    {filteredSuggestions.map(suggestion => {
                        const totalVotes = suggestion.votes_for + suggestion.votes_against;
                        const forPercentage = totalVotes > 0 ? Math.round((suggestion.votes_for / totalVotes) * 100) : 0;
                        const againstPercentage = totalVotes > 0 ? Math.round((suggestion.votes_against / totalVotes) * 100) : 0;

                        return (
                            <div key={suggestion.id} style={{
                                backgroundColor: '#FFFFFF',
                                borderRadius: '14px',
                                padding: '25px',
                                marginBottom: '20px',
                                boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
                            }}>
                                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '15px' }}>
                                    <div style={{ flex: 1 }}>
                                        <h3 style={{
                                            fontSize: '20px',
                                            color: '#353536',
                                            margin: '0 0 8px 0',
                                            fontFamily: 'Helvetica Neue',
                                            fontWeight: '500'
                                        }}>
                                            #{suggestion.id} {suggestion.title}
                                        </h3>
                                        <div style={{ fontSize: '14px', color: '#7C7C7C' }}>
                                            {formatDate(suggestion.created_at)} ‚Ä¢ {suggestion.author.first_name} {suggestion.author.last_name}
                                        </div>
                                    </div>
                                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
                                        <span style={{
                                            backgroundColor: getStatusColor(suggestion.status),
                                            color: suggestion.status === 'new' ? '#353536' : 'white',
                                            fontSize: '14px',
                                            padding: '6px 12px',
                                            borderRadius: '12px',
                                            fontWeight: '500'
                                        }}>
                                            {getStatusName(suggestion.status)}
                                        </span>

                                        <button
                                            className={`${styles.iconButton} ${styles.deleteButton}`}
                                            onClick={() => handleDeleteSuggestion(suggestion.id)}
                                            title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
                                        >
                                            üóëÔ∏è
                                        </button>
                                    </div>
                                </div>

                                {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                                <p style={{
                                    fontSize: '16px',
                                    color: '#353536',
                                    lineHeight: '1.5',
                                    margin: '0 0 20px 0'
                                }}>
                                    {suggestion.description}
                                </p>

                                {/* –î–µ–¥–ª–∞–π–Ω */}
                                {suggestion.deadline && (
                                    <div style={{
                                        fontSize: '14px',
                                        color: '#7C7C7C',
                                        marginBottom: '15px'
                                    }}>
                                        üìÖ –û—Ç–∫—Ä—ã—Ç–æ –¥–æ: {formatDate(suggestion.deadline)}
                                    </div>
                                )}

                                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è */}
                                <div style={{ marginBottom: '15px' }}>
                                    <div style={{ fontSize: '16px', fontWeight: '500', marginBottom: '10px' }}>
                                        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                                    </div>

                                    {/* –ì–æ–ª–æ—Å–∞ "–ó–∞" */}
                                    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                                        <span style={{ fontSize: '20px', marginRight: '10px' }}>üëç</span>
                                        <span style={{ fontSize: '16px', marginRight: '10px', minWidth: '60px' }}>–ó–∞</span>
                                        <div style={{
                                            flex: 1,
                                            height: '8px',
                                            backgroundColor: '#E0E0E0',
                                            borderRadius: '4px',
                                            overflow: 'hidden',
                                            marginRight: '10px'
                                        }}>
                                            <div style={{
                                                width: `${forPercentage}%`,
                                                height: '100%',
                                                backgroundColor: '#28A745',
                                                borderRadius: '4px'
                                            }} />
                                        </div>
                                        <span style={{ fontSize: '16px', fontWeight: '500', minWidth: '80px' }}>
                                            {suggestion.votes_for} ({forPercentage}%)
                                        </span>
                                    </div>

                                    {/* –ì–æ–ª–æ—Å–∞ "–ü—Ä–æ—Ç–∏–≤" */}
                                    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>
                                        <span style={{ fontSize: '20px', marginRight: '10px' }}>üëé</span>
                                        <span style={{ fontSize: '16px', marginRight: '10px', minWidth: '60px' }}>–ü—Ä–æ—Ç–∏–≤</span>
                                        <div style={{
                                            flex: 1,
                                            height: '8px',
                                            backgroundColor: '#E0E0E0',
                                            borderRadius: '4px',
                                            overflow: 'hidden',
                                            marginRight: '10px'
                                        }}>
                                            <div style={{
                                                width: `${againstPercentage}%`,
                                                height: '100%',
                                                backgroundColor: '#FF4444',
                                                borderRadius: '4px'
                                            }} />
                                        </div>
                                        <span style={{ fontSize: '16px', fontWeight: '500', minWidth: '80px' }}>
                                            {suggestion.votes_against} ({againstPercentage}%)
                                        </span>
                                    </div>

                                    <div style={{ fontSize: '14px', color: '#7C7C7C' }}>
                                        –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {totalVotes}
                                        {suggestion.comments_count && suggestion.comments_count > 0 && (
                                            <> ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {suggestion.comments_count}</>
                                        )}
                                    </div>
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è */}
                                {suggestion.status === 'new' || suggestion.status === 'under_review' ? (
                                    <div style={{ display: 'flex', gap: '10px' }}>
                                        <button
                                            onClick={() => handleVote(suggestion.id, 'for')}
                                            style={{
                                                backgroundColor: suggestion.user_vote === 'for' ? '#28A745' : '#F6F7F8',
                                                color: suggestion.user_vote === 'for' ? 'white' : '#353536',
                                                border: suggestion.user_vote === 'for' ? '2px solid #28A745' : '2px solid transparent',
                                                borderRadius: '11px',
                                                padding: '10px 20px',
                                                cursor: 'pointer',
                                                fontFamily: 'Helvetica Neue',
                                                fontSize: '16px',
                                                fontWeight: suggestion.user_vote === 'for' ? '500' : '400',
                                                transition: 'all 0.2s ease'
                                            }}
                                        >
                                            üëç –ó–∞
                                        </button>
                                        <button
                                            onClick={() => handleVote(suggestion.id, 'against')}
                                            style={{
                                                backgroundColor: suggestion.user_vote === 'against' ? '#FF4444' : '#F6F7F8',
                                                color: suggestion.user_vote === 'against' ? 'white' : '#353536',
                                                border: suggestion.user_vote === 'against' ? '2px solid #FF4444' : '2px solid transparent',
                                                borderRadius: '11px',
                                                padding: '10px 20px',
                                                cursor: 'pointer',
                                                fontFamily: 'Helvetica Neue',
                                                fontSize: '16px',
                                                fontWeight: suggestion.user_vote === 'against' ? '500' : '400',
                                                transition: 'all 0.2s ease'
                                            }}
                                        >
                                            üëé –ü—Ä–æ—Ç–∏–≤
                                        </button>
                                    </div>
                                ) : (
                                    <div style={{
                                        fontSize: '14px',
                                        color: '#7C7C7C',
                                        fontStyle: 'italic'
                                    }}>
                                        –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            ) : (
                <div className={styles.emptyState}>
                    <div className={styles.emptyIcon}>üó≥Ô∏è</div>
                    <h3>
                        {suggestions.length === 0 ? '–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π' : '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
                    </h3>
                    <p>
                        {suggestions.length === 0
                            ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è'
                            : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
                        }
                    </p>
                </div>
            )}

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
            {errors.suggestions && <ErrorField message={errors.suggestions} />}
            {errors.vote && <ErrorField message={errors.vote} />}
            {errors.deleteSuggestion && <ErrorField message={errors.deleteSuggestion} />}
        </div>
    );
};

export default ProjectVoting;